# --- Network and TLS Security ---
# Disable non-TLS Redis port to enforce encrypted connections
port 0

# Enable TLS on port 6379 for all secure client connections
tls-port 6379

# Paths to TLS certificate, key, and CA certificate.
tls-cert-file /certs/redis.crt
tls-key-file /certs/redis.key
tls-ca-cert-file /certs/ca.crt

# REQUIRE client authentication with TLS certificates
tls-auth-clients yes

# Force modern and secure TLS protocol versions only
tls-protocols "TLSv1.2 TLSv1.3"

# Restrict allowed TLS cipher suites to strong, forward-secret ciphers.
tls-ciphers "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256"

# Prefer server's cipher order to ensure the strongest available cipher is used.
tls-prefer-server-ciphers yes

# --- User and Authentication Security (ACL) ---
# Disable the default Redis user for security. This user typically has full access.
user default off

# Create a specific user (e.g., 'redis_user_3v7m0j' or a more descriptive name like 'app_user')
# Use a very strong, long, and complex password.
# Only grant necessary permissions using ACL categories or specific commands.
# Example: user app_user on >YOUR_STRONG_PASSWORD_HERE ~* +@read +@write +@list
# For your 'redis_user_3v7m0j' user, reconsider if '+@all' is truly needed.
# If this Redis instance is only for cache, you might only need +@read +@write.
user redis_user_3v7m0j on >Spr0zWPDuOKtibCbu4NW ~* +@all

# --- Resource Management and Stability ---
# Limit the maximum number of simultaneous clients to prevent resource exhaustion.
# Adjust this based on your application's expected concurrency.
maxclients 10000

# Limit maximum memory usage to prevent Redis from consuming all available RAM.
# This is crucial for stability. 'noeviction' policy will reject writes when full.
maxmemory 512mb
maxmemory-policy noeviction

# Configure client output buffer limits to prevent memory exhaustion by rogue clients.
# Defaults are usually fine, but review if you have specific high-volume pub/sub or replica needs.
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit slave 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60

# --- Logging and Visibility ---
# Set logging level to notice for informational messages.
# Adjust to 'warning' or 'verbose' for more or less detail.
loglevel notice

# Log to stdout (standard output), useful for containerized environments.
# In production, consider logging to a file or centralized log management system.
logfile ""

# --- Persistence (Optional, but important for data integrity) ---
# If Redis is used for caching, persistence might not be critical.
# If it stores important data, configure AOF or RDB snapshots.
# For example, to enable AOF: appendonly yes
# For example, to enable RDB snapshots: save 900 1 / save 300 10 / save 60 10000